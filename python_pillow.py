# -*- coding: utf-8 -*-
"""PYTHON-PILLOW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_D9qDALCXSFCjqkFpup-UZ_l6sXluju9

PILLOW is a Python Imaging Library.Over 30 different file formats can be identified and read by pillow.

For more information visit https://github.com/python-pillow/Pillow
"""

from google.colab import drive
drive.mount('/content/drive')

cd 'drive/My Drive/images'

"""# Image Module
https://pillow.readthedocs.io/en/stable/reference/Image.html#

To load an image from a folder
"""

from PIL import Image
img=Image.open('image.jpg')#when we open image in PILLOW,the image is not in numpy array 
print(type(img))#says the type of image
print(img.format)#format of image
print(img.mode)#says whether the image is grey scale or RGB
print(img.size)#size of image(width,height)
print(img.filename)#filename
print(img.width)#width of image
print(img.height)#heigh ot image
img#display

"""copy an image"""

copied_image=img.copy()#copy 
copied_image#display

"""Resizing and Saving image"""

small_img=img.resize((200,500))#resizing image without keeping aspect ratio
small_img.save('small_image.jpg')#saving image
small_img#display

"""Resizing by maintaining aspect ratio"""

new_images=img.copy()
new_images.thumbnail((200,200))#resizing image by keeping aspect ratio.We cannot store this to a variable
'''
If the new (width,height) is greater than actual image the size of image will not change.
If the new(width,height) is less than actual size and the given width and height ratio is same as of actual image, the resizing will happen.
If the new(width,height) is less than actual size and the given width and height ratio is not same as of actual image,then only the width will be taken and resizing will happen maintaining aspect ratio.
'''
print(new_images.size)#size of image(width,height)
new_images.save('resized_image.jpg')#saving image
new_images#display

"""cropping image"""

cropped_img=img.crop((100,100,300,280))#cropping image (x-start,y-start,x-end,y-end)
cropped_img.save('cropped_img.jpg')#saving image
cropped_img#display

"""copy and paste an image on another"""

img2=Image.open('orange.jpg')#opening image2
print(img2.size)#print size
img2#display

img1_copy=img.copy()#creating a copy of image
img1_copy.paste(img2,(100,100))#pasting image2 on image1
img1_copy#display

"""Image rotation"""

rotated_img=img.rotate(90)#rotate image by 90 degree
rotated_img

rotated_img_45=img.rotate(45)#rotate image by 45 degree..here the edges of resulting edges are cropped during rotation
rotated_img_45

rotated_img_45_no_crop=img.rotate(45,expand=True)#rotate image by 45 degree without cropping
rotated_img_45_no_crop

"""Flipping

"""

img_flipLR=img.transpose(Image.FLIP_LEFT_RIGHT)#flipping image left to right
img_flipLR#display

img_flipTB=img.transpose(Image.FLIP_TOP_BOTTOM)#flipping image top to bottom
img_flipTB#display

"""Changing image to grey_level/RGB"""

grey_img=img.convert("L")#converting RGB image to grey level
grey_img

rgb_img=img.convert("RGB")#convert greyscale to RGB
rgb_img

"""
Alpha Composite Of Two Images"""

img2=Image.open('peng.png').convert("RGBA")#opening image2 in RGBA  mode
img2

img1=Image.open('image.jpg').convert("RGBA")#opening image1 in RGBA  mode
img2= img2.resize(img1.size)#image2 must be same size of imgage1 for alpha composite of 2 images
'''
*When the value of alpha channel of one image is 0 - and of another image is 1, the alpha_composite() will display only the second image since its pixels are opaque.
*When the value of alpha channel of one image is 1 - and of another image is 0, the alpha_composite() will display only the first image as the pixels of the first image are opaque.
*When alpha channels of both the images are opaque, both the pixels are to be displayed - Transparency levels are determined by the color of the pixel's' from both the images equally.
'''
img3=Image.alpha_composite(img1, img2)
img3

"""colors in the image

"""

new_image=Image.open('image.jpg').convert('L')#open image in grey scale.It wonf work if we open in RGB
list_of_colors=Image.Image.getcolors(new_image) #list of colors used in this image
print(list_of_colors)
new_image

"""image split"""

image_list=Image.Image.split(img)#Image.split() method is used to split the image into individual bands. This method returns a tuple of individual image bands from an image. Splitting an “RGB” image creates three new images each containing a copy of one of the original bands (red, green, blue
display(image_list[0])
display(image_list[1])
display(image_list[2])

"""To process all images in a folder"""

import glob
path="files/*"#folder under consideration
for file in glob.glob(path):# for each file in the folder
  print(file)#print name of all files
  a=Image.open(file)#opening file
  rotated45=a.rotate(45,expand=True)#rotating image
  rotated45.save(file+'_rotated45.png',"PNG")#saving file